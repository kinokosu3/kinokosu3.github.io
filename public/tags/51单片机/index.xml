<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>51单片机 on kinokosu3のblog</title>
        <link>https://kinokosu3.github.io/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/</link>
        <description>Recent content in 51单片机 on kinokosu3のblog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>kinokosu3</copyright>
        <lastBuildDate>Fri, 09 Aug 2019 18:33:02 +0000</lastBuildDate><atom:link href="https://kinokosu3.github.io/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>一次物联网课设的回顾</title>
        <link>https://kinokosu3.github.io/p/%E4%B8%80%E6%AC%A1%E7%89%A9%E8%81%94%E7%BD%91%E8%AF%BE%E8%AE%BE%E7%9A%84%E5%9B%9E%E9%A1%BE/</link>
        <pubDate>Fri, 09 Aug 2019 18:33:02 +0000</pubDate>
        
        <guid>https://kinokosu3.github.io/p/%E4%B8%80%E6%AC%A1%E7%89%A9%E8%81%94%E7%BD%91%E8%AF%BE%E8%AE%BE%E7%9A%84%E5%9B%9E%E9%A1%BE/</guid>
        <description>&lt;p&gt;暑假已经过了一半了，复习的进度也大概过了一轮了（数学），对于这次课设，已经过了一段时间了，也是现在才突然想起来写一个随笔记一下过程，毕竟在我的傻屌大学里，也是少有的稍微有点规模的课程设计，前后的时间用了差不多一周，在交工前一天才主要完成了，因为我没怎么听课（哈哈哈哈），对于课题需要实现到怎么样子也是完成按照自己的想象来完成，到了答辩才发现我好像弄了一套和别人技术程度完成不一样的东西。之前也是完成没有弄过这方面的，也是边翻书边查资料来写，但是都不靠谱，弄的我走了无数的弯路，最后靠着自己的理解来完成了。还算挺有意思的。&lt;/p&gt;
&lt;h3 id=&#34;初步大概实现和电路仿真&#34;&gt;初步：大概实现和电路仿真&lt;/h3&gt;
&lt;p&gt;拿到课题的时候，我就想着如何实现通信级别的东西，我也完全是半桶水，在看书思考的时候也完全没有考虑什么，教科书式的写了一套多机通信的代码，一开始写了个最简单的一对二，在仿真里调试，屁颠屁颠的写了什么校验码，收发数据握手，一大堆通信特性，代码也删删改改，迭代了几个版本，完成了一个能在仿真里跑的多机通信代码模型，拿到实机一跑，就掉进了真正的坑。跑完发现全没动静，串口调试也完全是乱码，完全不行，最后发现有线通信代码是可用的，拿两根线把单片机的RX/TX反接，完全ok，最后在某网站上的一篇资料发现了一句话，这句话也代表了整个项目的坑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;有线通信时收发数据的时间间隔近似于0，无线通信时会有时间间隔&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主要无线通信代码和乱码debug&#34;&gt;主要：无线通信代码和乱码debug&lt;/h3&gt;
&lt;p&gt;想通之后，没办法，靠教科书式，复制粘贴来的代码是没啥卵用了，自己对着通信步骤自己写一套吧，然后就开始重新写。之前因为需要仿真的缘故，软件只能在windows环境下运行，就没有使用mac，现在因为都是实机测试，就不需要Windows了，所以转到mac下完成代码。打了串口驱动，装了C51编译，找了个烧录脚本，都是mac下用的。好像到最后跑都是mac下编译出来的程序，当然展示时候用的keil格式的C代码，没有用这边编译器的版本。在写的时候也是不停de各种bug，比如收的代码放在中断，发就随便根据标示写，每次都开串口中断都要判断是否是收的数据。这个方式就解决双方握手之后时间无法对上，导致无法进行代码的情况，在收发之前都加了相近的时间挂起，主要细节不太记得了，反正好像双机ok，三机又不行了，后来一周都是不停的对时间间隔的时间进行调参。这时候很明显的一个bug，传输数据bug，运行出现死循环。都是收发时间对不上导致的。&lt;/p&gt;
&lt;h3 id=&#34;完成-画出时间轴修改了时间间隔时间实现无乱码同步&#34;&gt;完成： 画出时间轴，修改了时间间隔时间，实现无乱码同步&lt;/h3&gt;
&lt;p&gt;一直调试了几天的时间，最后在交工前，突然想起时间轴的问题，对每一步就仔细对准时间，然后就完成了整套通信的乱码问题。在一路下来，从很复杂的有着很多特性通信模型，一路简化下来，就只剩了一个握手收发的框架，在最后这段时间，在修改时间间隔解决乱码的中途，也根据课题集成了传感器代码进来，对每一个任务需求进行完成。也成功完成了答辩（这不是肯定的吗）。&lt;/p&gt;
&lt;h3 id=&#34;后记&#34;&gt;后记&lt;/h3&gt;
&lt;p&gt;这次实训（算是吧）能有一个那么开放的过程也是因为老师，这次的物联网课老师好像是新来的，不太清楚我们这些傻屌学生的实力，就布置了一个较为开放性的课设。算是较为深度的训练了一次动手能力，虽然代码写了很多套都推翻了，越写越简单哈哈哈哈，大学生涯应该是没有机会了。也挺感概的。&lt;/p&gt;
&lt;p&gt;代码开源了，虽然老师不想让我公开的，还想让我挂去展示厅，发傻屌中文期刊，我觉得我没有什么求名求利的心情，也算不上是什么很牛逼的东西，最后开始公开了，Open Source Spirit最重要嘛。&lt;/p&gt;
&lt;p&gt;GitHub链接：&lt;a class=&#34;link&#34; href=&#34;https://github.com/kinokosu3/B405-course-design&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;B405-course-design&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
