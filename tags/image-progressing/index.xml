<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Image Progressing on kinokosu3のblog</title>
        <link>https://kinokosu3.github.io/tags/image-progressing/</link>
        <description>Recent content in Image Progressing on kinokosu3のblog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>kinokosu3</copyright>
        <lastBuildDate>Thu, 22 Mar 2018 17:22:22 +0000</lastBuildDate><atom:link href="https://kinokosu3.github.io/tags/image-progressing/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数字图像处理笔记</title>
        <link>https://kinokosu3.github.io/p/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Thu, 22 Mar 2018 17:22:22 +0000</pubDate>
        
        <guid>https://kinokosu3.github.io/p/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;一幅图像可以定义成一个二维函数,其中x和y是空间坐标(平面),而在任何一对空间坐标(x,y)处的幅值f成为图像在该点处的强度或者灰度,当x,y和灰度值f是有限的离散数值时, 我们成为该图像为数字图像。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灰度是表明图像明暗的数值，即黑白图像中点的颜色深度，范围一般从0到255，白色为255 ，黑色为0，故黑白图片也称灰度图像。灰度值指的是单个像素点的亮度。灰度值越大表示越亮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;图像形成模型&#34;&gt;图像形成模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt; f(x, y) &amp;lt; ∞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数f(x, y)可以由两个分量来表示:入射分量和反射分量,分别表示为i(x,y),r(x,y),f(x, y) = i(x,y)r(x,y)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;0 &amp;lt; i(x, y) &amp;lt; ∞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0 &amp;lt; r(x, y) &amp;lt; 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单色图像在任何坐标(x0, y0)处的强度(灰度)表示为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ι = f(x0, y0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由上式得取值范围:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lmin ≤ ι ≤ Lmax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区间[Lmin, Lmax]成为灰度级(强度级), 实际情况常常令该区域为[0,L-1],其中ι=0为黑色,ι=L-1在灰度级中为白色。所有中间值是从黑色到白色之间变化的灰度色调。&lt;/p&gt;
&lt;p&gt;python-opencv示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;  &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1.jpg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;OUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;图像内插&#34;&gt;图像内插&lt;/h2&gt;
&lt;p&gt;从根本上看，内插是用已知数据来估计未知位置的数值的处理。比如调整图像的大小(收缩和放大)，这是基本的图像重取样方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最近邻内插法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如一幅图由500x500放大到750x750，先创建一个750x750的网格，然后缩小和原图像匹配，显然收缩后的750x750网格像素间隔要小于原图像的像素间隔。然后我们在原图像中寻找最接近的像素，并把该像素的灰度赋给750x750网格的新像素。当我们完成对网格中所有点的灰度赋值后，就把图像扩展到原来规定的大小，得到图像。&lt;/p&gt;
&lt;p&gt;这种方法把原图像中最近邻的灰度赋给了每个新位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双线性内插&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们使用4个最近邻去估计给定位置的灰度，由v(x,y)来表示灰度值，公式为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;v(x,y) = ax + by + cxy + d&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双三次内插&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用16个最近邻点，公式为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v(x,y) = ∑(3 i=0)∑(3 j=0)a(ij)x^i*y^j&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;双三次内插在保持细节方面比双线性内插要好，商业图像编辑软件标准内插方法，比如Adobe Photoshop&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在matplotlib.pylot.imshow的一个选项中,interpolation是选择内插方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;未完待续&#34;&gt;未完待续&lt;/h2&gt;</description>
        </item>
        
    </channel>
</rss>
